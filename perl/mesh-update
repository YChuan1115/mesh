#!/usr/bin/perl -T
#
# Copyright (C) 2006-2017 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration
# (NASA).  All Rights Reserved.
#
# This software is distributed under the NASA Open Source Agreement
# (NOSA), version 1.3.  The NOSA has been approved by the Open Source
# Initiative.  See http://www.opensource.org/licenses/nasa1.3.php
# for the complete NOSA document.
#
# THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF ANY
# KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT
# LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO
# SPECIFICATIONS, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
# A PARTICULAR PURPOSE, OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT
# THE SUBJECT SOFTWARE WILL BE ERROR FREE, OR ANY WARRANTY THAT
# DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE SUBJECT SOFTWARE. THIS
# AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN ENDORSEMENT BY
# GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS, RESULTING
# DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS RESULTING
# FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY DISCLAIMS
# ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE, IF
# PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS".
#
# RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE UNITED STATES
# GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY PRIOR
# RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY
# LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE,
# INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM,
# RECIPIENT'S USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND
# HOLD HARMLESS THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND
# SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT, TO THE EXTENT PERMITTED
# BY LAW.  RECIPIENT'S SOLE REMEDY FOR ANY SUCH MATTER SHALL BE THE
# IMMEDIATE, UNILATERAL TERMINATION OF THIS AGREEMENT.
#

# This program outputs either the version or the contents of a supported
# file (currently only mc).  It is invoked transparently by mc during
# key generation to determine if the client needs to automatically
# update itself.

use strict;
use Getopt::Long qw(:config bundling no_ignore_case require_order);

our $VERSION = 0.08;

# default configuration
my %conf = (
    conf_file => "/etc/mesh/mesh.conf",
    key_days => 7,
    map_host => undef,
    map_port => 22,
    map_print => undef,
    mp_host => undef,
    mp_port => 22,
    mp_print => undef,
    prefix_dir => "/usr/local",
);

# parse configuration
open(FILE, $conf{conf_file}) or
    die "Config file $conf{conf_file} does not exist or is not readable\n";
my $mline;
while (my $line = <FILE>) {
    # strip whitespace and comments
    $line =~ s/^\s+|\s+$|\s*#.*//g;
    next if (!$line);
    # support line continuation operator
    $mline .= $line;
    next if ($mline =~ s/\s*\\$/ /);
    $conf{$1} = $2 if ($mline =~ /^(\S+)\s+(.*)/);
    $mline = undef;
}
close FILE;

# exit if any required parameters are not defined
foreach my $key (keys %conf) {
    die "Config parameter \"$key\" is not defined\n"
        if (!$conf{$key});
}

# untaint path
$ENV{PATH} = "/bin:/usr/bin:/usr/local/bin";
# untaint insecure environment variables
delete $ENV{$_} foreach (qw(BASH_ENV CDPATH ENV IFS));

# define paths of supported programs
my %paths = (
    mc => "$conf{prefix_dir}/bin/mc",
);

# parse arguments
my %opts;
my $rc = GetOptions(\%opts,
    "file=s", "version",
);
exit 1 if (!$rc || scalar(@ARGV) != 0);

# determine if file is supported by auto-updates
my $file = $paths{$opts{file}};
if (defined $file && open(FILE, $file)) {
    while (<FILE>) {
        if ($opts{version}) {
            if (/VERSION\s*=\s*(\S+)\s*;/) {
                # print latest version string of file
                close FILE;
                print "$1\n";
                exit;
            }
            # loop until version found
        } else {
            # print line with possible substitution from config
            s/MESHCONF_(\w+)/$conf{$1}/g;
            print;
        }
    }
    close FILE;
}
print "undef\n" if ($opts{version});

