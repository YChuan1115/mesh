/*
Bypass
Copyright (C) 1999-2001 Douglas Thain
http://www.cs.wisc.edu/condor/bypass
This program is released under a BSD License.
See the file COPYING for details.
*/

// PZK 6/28/06: use to include location of BYPASS_*_PTHREAD_* definitions
#ifdef BYPASS_PTHREAD_H
#include BYPASS_PTHREAD_H
#endif

#define TRY(x) if(!(x)) goto fail;

#if defined(linux)
// PZK 5/15/06: define this in makefile
//	#define BYPASS_PRELOAD_LIST "LD_PRELOAD"
	#define BYPASS_PRELOAD_SEPARATORS " \t"
// PZK 4/6/06: define these in makefile
//	#define BYPASS_LIBC "libc.so.6"
//	#define BYPASS_LIBPTHREAD "libpthread.so"
#elif defined(sun)
//	#define BYPASS_PRELOAD_LIST "LD_PRELOAD"
	#define BYPASS_PRELOAD_SEPARATORS " \t"
//	#define BYPASS_LIBC "libc.so"
	#define BYPASS_LIBSOCKET "libsocket.so"
//	#define BYPASS_LIBPTHREAD "libpthread.so"
#elif defined(__osf__) || defined(sgi)
//	#define BYPASS_PRELOAD_LIST "_RLD_LIST"
	#define BYPASS_PRELOAD_SEPARATORS ":"
//	#define BYPASS_LIBC "libc.so"
//	#define BYPASS_LIBPTHREAD "libpthread.so"
#else
	#error "Unsupported operating system!"
#endif

#define BYPASS_PRELOAD_LIST_MAX 1024

// PZK 11/3/11: changed return to const to avoid warnings
const char * bypass_call_string( int call );

/*
Note that these values are non-static so that they are
shared between all agents loaded into one process.
*/

int bypass_debug_mode = 0;
int bypass_failure_passthrough = 0;

void bypass_die()
{
	kill(getpid(),SIGKILL);
	exit(-1);
}

// PZK 11/3/11: changed fmt to const to avoid warnings
void bypass_vprintf( const char *fmt, va_list args )
{
	char buffer[1024];

	syscall( SYS_write, 2, "bypass: ", 8 );
	vsprintf( buffer, fmt, args);
	syscall( SYS_write, 2, buffer, strlen(buffer) );
}

// PZK 11/3/11: changed fmt to const to avoid warnings
void bypass_debug( const char *fmt, ... )
{
	va_list args;
	va_start(args,fmt);

	if(!bypass_debug_mode) return;
	bypass_vprintf( fmt, args );

	va_end(args);
}

// PZK 11/3/11: changed fmt to const to avoid warnings
void bypass_error( const char *fmt, ... )
{
	va_list args;
	va_start(args,fmt);

	bypass_vprintf( fmt, args );

	va_end(args);
}

// PZK 11/3/11: changed fmt to const to avoid warnings
void bypass_fatal( const char *fmt, ... )
{
	va_list args;
	va_start(args,fmt);

	bypass_vprintf( fmt, args );
	
	bypass_die();
	va_end(args);
}

void bypass_call_error( int call, char *message )
{	
	bypass_fatal("error while performing '%s': %s\n",bypass_call_string(call),message);
}

/*
This function is called inititalize the layer data structures.
it is called at the beginning of every trapped function, including
pthread_create.  Because it comes before any thread creation, it
does not need to be thread-safe.
*/

extern "C" void bypass_layer_init()
{
	static int init_done=0;
	static char listcopy[BYPASS_PRELOAD_LIST_MAX];
	char *list;
	char *item;

	if(init_done) {
		return;
	}

    // PZK 4/19/05: null environ causes seg fault on getenv (altix)
    // PZK 5/15/06: set up dummy environ if null
    extern char **environ;
    if (environ == NULL) {
        environ = (char **) malloc(sizeof(char *));
        environ[0] = NULL;
    }

	if(getenv("BYPASS_DEBUG")) {
		bypass_debug_mode = 1;
		bypass_debug("debugging mode on\n");
	}

	if(getenv("BYPASS_FAILURE_PASSTHROUGH")) {
		bypass_failure_passthrough=1;
		bypass_debug("failure passthrough mode on\n");
	}

    // PZK 5/15/06: use define instead of getenv for security
	list = BYPASS_PRELOAD_LIST;

    // PZK 4/19/05: moved this after return above so it won't
    // be marked initialized until it is actually done
    init_done=1;

	strcpy(listcopy,list);

	item = strtok(listcopy,BYPASS_PRELOAD_SEPARATORS);
	while(item) {
		if(strcmp(item,"DEFAULT")) {
			layer_register(item,1);
		}
		item = strtok(0,BYPASS_PRELOAD_SEPARATORS);
	}

	#ifdef BYPASS_LIBSOCKET
	layer_register(BYPASS_LIBSOCKET,0);
	#endif

	layer_register(BYPASS_LIBC,0);

	if(bypass_debug_mode) {
		bypass_debug("layers in effect:\n");
		layer_dump();
	}

	/*
	Important: When initialized, layers start with no current
	layer at all.  Once the layer stack is set up, this thread
	gets put at the top.  Other threads created through pthread_create
	work differently.
	*/

	layer_top();
}

#ifdef USE_PTHREADS

/*
Thread creation is a little tricky.  The problem is that the new thread
must begin executing in the same layer as the thread that created it.
Further complicating matters is that the thread system itself may fork
manager threads that must run in the lowest layer.  So, all threads are
created by default in the lowest layer.  (see layer.c)  The initial thread
is moved to the top layer after registration (see bypass_layer_init), and
children of pthread create are moved to the layer of their parent.
(see bypass_thread_start)
*/

#include <pthread.h>

typedef void * (*pthread_start_t) ( void *arg );
typedef int (*pthread_create_t) ( pthread_t *tid, const pthread_attr_t *attr, pthread_start_t start, void *arg );

/*
This is the data structure passed from parent to child, and is used to 
*/

struct thread_start_info {
	struct layer_entry *layer;
	pthread_start_t start;
	void *arg;
};

static void * bypass_thread_start( void *arg )
{
	struct thread_start_info *info = (struct thread_start_info *) arg;
	layer_set( info->layer );
    // PZK 6/28/06: allow interception after pthread_create() but before
    // the thread is actually started
	#ifdef BYPASS_PRE_PTHREAD_START
	BYPASS_PRE_PTHREAD_START;
	#endif
	return info->start( info->arg );
}

extern "C" int pthread_create ( pthread_t *tid, const pthread_attr_t *attr, void *(*start) (void*), void *arg )
{
	void *handle;
	pthread_create_t fptr;
	struct thread_start_info *info;
	struct layer_entry *layer;
	int rc;

	bypass_layer_init();

	info = (struct thread_start_info *) private_malloc(sizeof(*info));

	layer = layer_get();

	info->layer = layer;
	info->start = start;
	info->arg = arg;

	/*
	We manually open libpthread here instead of using the layer
	library, because we do not want to be scanning through multiple
	layers to find *any* pthread_create -- we want the real one.
	*/
	handle = dlopen(BYPASS_LIBPTHREAD,RTLD_LAZY);
	if(!handle) bypass_fatal("couldn't open %s\n",BYPASS_LIBPTHREAD);

	fptr = (pthread_create_t) dlsym(handle,"pthread_create");
	if(!fptr) bypass_fatal("couldn't find pthread_create in %s\n",BYPASS_LIBPTHREAD);

    // PZK 6/28/06: allow interception immediately before pthread_create()
	#ifdef BYPASS_PRE_PTHREAD_CREATE
	BYPASS_PRE_PTHREAD_CREATE(tid, attr, bypass_thread_start, info);
	#endif
	rc = fptr( tid, attr, bypass_thread_start, (void*) info );
    // PZK 6/28/06: allow interception immediately after pthread_create()
	#ifdef BYPASS_POST_PTHREAD_CREATE
	BYPASS_POST_PTHREAD_CREATE(tid, attr, bypass_thread_start, info, rc);
	#endif
	return rc;
}

/*
Note that it is ok for this mutex to be static,
because the functions that access it are public
and shared.  We get faster access to the mutex by making it private.
*/

static pthread_mutex_t bypass_layer_mutex = PTHREAD_MUTEX_INITIALIZER;

extern "C" void layer_pthread_mutex_lock()
{
	pthread_mutex_lock(&bypass_layer_mutex);
}

extern "C" void layer_pthread_mutex_unlock()
{
	pthread_mutex_unlock(&bypass_layer_mutex);
}

// PZK 8/7/07: changed int to intptr_t for 64-bit compatibility
extern "C" intptr_t layer_pthread_self()
{
	return (intptr_t) pthread_self();
}

#else

#include <pthread.h>

extern "C" int pthread_create ( pthread_t *tid, const pthread_attr_t *attr, void *(*start) (void*), void *arg )
{
	bypass_error("Oops, you called pthread_create, but this agent does not support threaded programs.\n");
	bypass_fatal("Try rebuilding it with -DUSE_PTHREADS\n");
	return 1;
}

extern "C" void layer_pthread_mutex_lock()
{
}

extern "C" void layer_pthread_mutex_unlock()
{
}

extern "C" int  layer_pthread_self()
{
	return 1;
}

#endif

